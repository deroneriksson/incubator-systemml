#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# This script can be used to compute label predictions
# Meant for use with a model learnt using l2-svm.dml
#
# Given ground truth labels, the script will compute an 
# accuracy (%) for the predictions
#
# Example Usage:
# hadoop jar SystemML.jar -f l2-svm-predict.dml -nvargs X=data Y=labels model=model scores=scores accuracy=accuracy confusion=confusion fmt="text"
#
# Note about inputs: 
# labels (entries in Y) should either be set to +1/-1
# or be the result of recoding
# anything else may prompt an error message from this script

/* BEGIN-SCRIPT-METADATA
{
	"name": "Binary-Class SVM Compute Label Predictions",
	"description": "This script can be used to compute label predictions. Meant for use with a model generated by l2-svm.dml.",
	"inputs": [
		{"name":"X",          "type":"Matrix",                "description":"Input testing features."},
		{"name":"y",          "type":"Matrix",                "description":"(Optional) Input testing labels. See $Y."},
		{"name":"w",          "type":"Matrix",                "description":"Input model (output from l2-svm.dml training)."},
		{"name":"$Y",         "type":"String", "default":" ", "description":"If not equal to \" \", Y matrix will be an input."},
		{"name":"$confusion", "type":"String", "default":" ", "description":"If not equal to \" \", confusion_mat matrix will be output."},
		{"name":"$maxiter",   "type":"Integer", "default":"100",   "description":"Maximum iterations, must be a positive integer."},
	],
	"outputs": [
		{"name":"scores",        "type":"Matrix", "description":"Scores matrix."},
		{"name":"confusion_mat", "type":"Matrix", "description":"Confusion matrix (available if if $Y is not \" \" and $confusion is not \" \")."},
		{"name":"acc",           "type":"Double", "description":"Accuracy (available if $Y is not \" \")."},
	],
	"examples": [
		{"example":"
val habermanUrl = \"http://archive.ics.uci.edu/ml/machine-learning-databases/haberman/haberman.data\"
val habermanList = scala.io.Source.fromURL(habermanUrl).mkString.split(\"\\n\")
val habermanRDD = sc.parallelize(habermanList)
val subsets = dmlFromFile(\"scripts/utils/sample2subsets.dml\")
subsets.in(\"X\", habermanRDD).out(\"S1\", \"S2\")
val (training,testing) = ml.execute(subsets).getTuple[Matrix, Matrix](\"S1\", \"S2\")

val splitTraining = dmlFromFile(\"scripts/utils/splitByColumnIndex.dml\")
splitTraining.in(\"X\",training).in(\"$index\",3).out(\"Y\",\"Z\")
val (trainingFeatures,trainingLabels) = ml.execute(splitTraining).getTuple[Matrix,Matrix](\"Y\",\"Z\")

val l2svm = dmlFromFile(\"scripts/algorithms/l2-svm.dml\")
l2svm.in(\"X\",trainingFeatures).in(\"Y\",trainingLabels).out(\"w\")
val l2svmModel = ml.execute(l2svm).getMatrix(\"w\")

val splitTesting = dmlFromFile(\"scripts/utils/splitByColumnIndex.dml\")
splitTesting.in(\"X\",testing).in(\"$index\",3).out(\"Y\",\"Z\")
val (testingFeatures,testingLabels) = ml.execute(splitTesting).getTuple[Matrix,Matrix](\"Y\",\"Z\")

val l2svmPredict = dmlFromFile(\"scripts/algorithms/l2-svm-predict.dml\")
l2svmPredict.in(\"X\",testingFeatures).in(\"y\",testingLabels).in(\"w\", l2svmModel).in(\"$Y\",\"yes\").in(\"$confusion\",\"yes\").out(\"scores\", \"confusion_mat\", \"acc\")
val (scores, confusion, accuracy) = ml.execute(l2svmPredict).getTuple[Matrix, Matrix, Double](\"scores\", \"confusion_mat\", \"acc\")
println(accuracy)
confusion.toDF().sort(\"__INDEX\").show()
"}
	]
}
END-SCRIPT-METADATA */

cmdLine_Y = ifdef($Y, " ")
cmdLine_confusion = ifdef($confusion, " ")
cmdLine_accuracy = ifdef($accuracy, " ")
cmdLine_scores = ifdef($scores, " ")
cmdLine_fmt = ifdef($fmt, "text")

X = read($X)

w = read($model)

dimensions = as.scalar(w[nrow(w),1])
if(dimensions != ncol(X))
	stop("Stopping due to invalid input: Model dimensions do not seem to match input data dimensions")
	
intercept = as.scalar(w[nrow(w)-1,1])
negative_label = as.scalar(w[nrow(w)-2,1])
positive_label = as.scalar(w[nrow(w)-3,1])
w = w[1:(nrow(w)-4),]

b = 0.0
if(intercept == 1)
	b = as.scalar(w[nrow(w),1])

scores = b + (X %*% w[1:ncol(X),])

if(cmdLine_scores != " ")
	write(scores, cmdLine_scores, format=cmdLine_fmt)

if(cmdLine_Y != " "){
	y = read(cmdLine_Y)

	pred = (scores >= 0)
	pred_labels = pred*positive_label + (1-pred)*negative_label
	num_correct = sum(pred_labels == y)
	acc = 100*num_correct/nrow(X)

	acc_str = "Accuracy (%): " + acc
	print(acc_str)
	if(cmdLine_accuracy != " ")
		write(acc_str, cmdLine_accuracy)

	if(cmdLine_confusion != " "){
		pred = 2*pred - 1
		if(negative_label != -1 | positive_label != +1)
        	y = 2/(positive_label - negative_label)*y - (negative_label + positive_label)/(positive_label - negative_label)
		
		pred_is_minus = (pred == -1)
		pred_is_plus = 1 - pred_is_minus
		y_is_minus = (y == -1)
		y_is_plus = 1 - y_is_minus

		check_min_y_minus = sum(pred_is_minus*y_is_minus)
		check_min_y_plus = sum(pred_is_minus*y_is_plus)
		check_max_y_minus = sum(pred_is_plus*y_is_minus)
		check_max_y_plus = sum(pred_is_plus*y_is_plus)

		#s = check_min_y_minus + "," + check_min_y_plus
		#s = append(s, check_max_y_minus + "," + check_max_y_plus)
		#s = append(s, "")
		#write(s, cmdLine_confusion)
		
		confusion_mat = matrix(0, rows=3, cols=3)
        confusion_mat[1,2] = negative_label
        confusion_mat[1,3] = positive_label
        confusion_mat[2,1] = negative_label
        confusion_mat[3,1] = positive_label
        confusion_mat[2,2] = check_min_y_minus
        confusion_mat[2,3] = check_max_y_minus
        confusion_mat[3,2] = check_min_y_plus
        confusion_mat[3,3] = check_max_y_plus

        write(confusion_mat, cmdLine_confusion, format="csv")
	}
}
