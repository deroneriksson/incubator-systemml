#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# generates data to test linear regression

/* BEGIN-SCRIPT-METADATA
{
	"name": "Generate Random Data for Linear Regression Algorithm",
	"description": "This script generates random data for a Linear Regression algorithm.",
	"inputs": [
		{"name":"$numSamples",      "type":"Integer",                   "description":"Number of samples"},
		{"name":"$numFeatures",     "type":"Integer",                   "description":"Number of features (independent variables)"},
		{"name":"$maxFeatureValue", "type":"Double",                    "description":"Maximum feature value (absolute value)"},
		{"name":"$maxWeight",       "type":"Double",                    "description":"Maximum weight (absolute value)"},
		{"name":"$addNoise",        "type":"Boolean", "default":"true", "description":"If true, add noise to labels"},
		{"name":"$b",               "type":"Double",  "default":"0.0",  "description":"Intercept"},
		{"name":"$sparsity",        "type":"Double",  "default":"0.8",  "description":"Sparsity in generated data (between 0 and 1)."},
	],
	"outputs": [
		{"name":"output", "type":"Matrix", "description":"Output matrix consisting of features with appended label column"},
	],
	"examples": [
		{"example":"
val dataGen = dmlFromFile(\"scripts/datagen/genRandData4LinearRegression.dml\")
dataGen.in(\"$numSamples\", 1000).in(\"$numFeatures\", 50).in(\"$maxFeatureValue\", 5.0).in(\"$maxWeight\", 5.0).in(\"$addNoise\", false).out(\"output\")
val dataGenResults = ml.execute(dataGen)
val data = dataGenResults.getMatrix(\"output\")
"}
	]
}
END-SCRIPT-METADATA */

numSamples = $numSamples
numFeatures = $numFeatures
maxFeatureValue = $maxFeatureValue
maxWeight = $maxWeight
outputLocation = ifdef($outputLocation, "lin-reg.csv")
addNoise = ifdef($addNoise, TRUE)
b = ifdef($b, 0.0)
sparsity = ifdef($sparsity, 0.8)
fmt = ifdef($fmt, "csv")

output = generateRandomData(numSamples, numFeatures, maxFeatureValue, maxWeight, addNoise, b, sparsity)

write(output, outputLocation, format=fmt)

generateRandomData = function(int numSamples, int numFeatures, double maxFeatureValue, double maxWeight, boolean addNoise, double b, double sparsity) return (matrix[double] output) {
  data = rand(rows=numSamples, cols=numFeatures, min=-1, max=1, pdf="uniform", seed=0, sparsity=sparsity)
  weights = rand(rows=numFeatures, cols=1, min=-1, max=1, pdf="uniform", seed=0)
  data = data * maxFeatureValue
  weights = weights * maxWeight
  labels = data %*% weights

  if (b != 0) {
    b_mat = rand(rows=1, cols=1, min=b, max=b, pdf="uniform")
    weights = t(cbind(t(weights), b_mat))
    labels = labels + b
  }

  if (addNoise == TRUE) {
    noise = rand(cols=1, pdf="normal", rows=$numSamples, seed=0)
    labels = labels + noise
  }

  output = cbind(data, labels)
}


